---
import type { CollectionEntry } from 'astro:content';

interface Props {
  reports: CollectionEntry<'reports'>[];
}

const { reports } = Astro.props;

// Extract unique vendors and products for filtering
const vendors = [...new Set(reports.map(report => report.data.vendor).filter(Boolean))];
const products = [...new Set(reports.map(report => report.data.product).filter(Boolean))];

// Get date ranges
const today = new Date();
const oneWeekAgo = new Date(today);
oneWeekAgo.setDate(today.getDate() - 7);
const oneMonthAgo = new Date(today);
oneMonthAgo.setMonth(today.getMonth() - 1);
const threeMonthsAgo = new Date(today);
threeMonthsAgo.setMonth(today.getMonth() - 3);

// Format dates for inputs
const formatDate = (date: Date) => date.toISOString().split('T')[0];
---

<aside class="w-full md:w-64 lg:w-72 bg-white dark:bg-gray-800 p-4 border-b md:border-b-0 md:border-r border-gray-200 dark:border-gray-700">
  <div class="mb-4 pb-2 border-b border-gray-200 dark:border-gray-700">
    <h2 class="text-lg font-semibold text-gray-800 dark:text-gray-200">Filters</h2>
    <button id="resetFilters" class="text-sm text-blue-600 dark:text-blue-400 hover:underline">Reset All</button>
  </div>

  <!-- Quick Filters / Status -->
  <details open class="mb-4">
    <summary class="font-medium text-gray-700 dark:text-gray-300 cursor-pointer py-1 select-none">
      Quick Filters
    </summary>
    <div class="mt-2 pl-2 space-y-2">
      <label class="flex items-center text-sm">
        <input type="checkbox" id="kevFilter" class="mr-2">
        Known Exploited (KEV)
      </label>
      <label class="flex items-center text-sm">
        <input type="checkbox" id="zeroDayFilter" class="mr-2">
        Zero-Day/Preliminary
      </label>
      <label class="flex items-center text-sm">
        <input type="checkbox" id="patchAvailableFilter" class="mr-2">
        Patch Available
      </label>
    </div>
  </details>

  <!-- Severity & Risk Score -->
  <details open class="mb-4">
    <summary class="font-medium text-gray-700 dark:text-gray-300 cursor-pointer py-1 select-none">
      Severity & Risk Score
    </summary>
    <div class="mt-2 pl-2 space-y-3">
      <!-- CVSS Score Slider -->
      <div>
        <label class="block text-sm font-medium">CVSS Score</label>
        <div class="flex items-center">
          <input 
            type="range" 
            id="cvssSlider" 
            min="0" 
            max="10" 
            step="0.1" 
            value="0" 
            class="w-full"
          >
          <span id="cvssValue" class="ml-2 text-sm">0+</span>
        </div>
      </div>

      <!-- EPSS Score Slider -->
      <div>
        <label class="block text-sm font-medium">EPSS Score</label>
        <div class="flex items-center">
          <input 
            type="range" 
            id="epssSlider" 
            min="0" 
            max="100" 
            step="1" 
            value="0" 
            class="w-full"
          >
          <span id="epssValue" class="ml-2 text-sm">0%+</span>
        </div>
      </div>

      <!-- Severity Levels -->
      <div>
        <label class="block text-sm font-medium">Severity Levels</label>
        <div class="space-y-1 mt-1">
          <label class="flex items-center text-sm">
            <input type="checkbox" id="criticalFilter" class="mr-2" name="severityLevel">
            Critical
          </label>
          <label class="flex items-center text-sm">
            <input type="checkbox" id="highFilter" class="mr-2" name="severityLevel">
            High
          </label>
          <label class="flex items-center text-sm">
            <input type="checkbox" id="mediumFilter" class="mr-2" name="severityLevel">
            Medium
          </label>
          <label class="flex items-center text-sm">
            <input type="checkbox" id="lowFilter" class="mr-2" name="severityLevel">
            Low
          </label>
        </div>
      </div>
    </div>
  </details>

  <!-- Date Ranges -->
  <details open class="mb-4">
    <summary class="font-medium text-gray-700 dark:text-gray-300 cursor-pointer py-1 select-none">
      Date Ranges
    </summary>
    <div class="mt-2 pl-2 space-y-3">
      <div>
        <label class="block text-sm">Start Date</label>
        <input 
          type="date" 
          id="startDateFilter" 
          class="w-full border rounded p-1 text-sm bg-white dark:bg-gray-700"
        >
      </div>
      <div>
        <label class="block text-sm">End Date</label>
        <input 
          type="date" 
          id="endDateFilter" 
          class="w-full border rounded p-1 text-sm bg-white dark:bg-gray-700"
        >
      </div>
      <div class="flex flex-wrap gap-2">
        <button 
          data-days="7" 
          class="text-xs bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 rounded px-2 py-1 date-preset"
        >
          Last 7 days
        </button>
        <button 
          data-days="30" 
          class="text-xs bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 rounded px-2 py-1 date-preset"
        >
          Last 30 days
        </button>
        <button 
          data-days="90" 
          class="text-xs bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 rounded px-2 py-1 date-preset"
        >
          Last 90 days
        </button>
      </div>
    </div>
  </details>

  <!-- Vendor/Product/OS -->
  {(vendors.length > 0 || products.length > 0) && (
    <details class="mb-4">
      <summary class="font-medium text-gray-700 dark:text-gray-300 cursor-pointer py-1 select-none">
        Vendors & Products
      </summary>
      <div class="mt-2 pl-2 space-y-3">
        {vendors.length > 0 && (
          <div>
            <label class="block text-sm font-medium">Vendors</label>
            <input 
              type="text" 
              id="vendorSearch" 
              placeholder="Search vendors..." 
              class="w-full border rounded p-1 text-sm mt-1 mb-1 bg-white dark:bg-gray-700"
            >
            <div class="max-h-40 overflow-y-auto space-y-1 vendor-checkboxes">
              {vendors.map(vendor => (
                <label class="flex items-center text-sm">
                  <input type="checkbox" class="mr-2 vendor-filter" value={vendor}>
                  {vendor}
                </label>
              ))}
            </div>
          </div>
        )}

        {products.length > 0 && (
          <div>
            <label class="block text-sm font-medium">Products</label>
            <input 
              type="text" 
              id="productSearch" 
              placeholder="Search products..." 
              class="w-full border rounded p-1 text-sm mt-1 mb-1 bg-white dark:bg-gray-700"
            >
            <div class="max-h-40 overflow-y-auto space-y-1 product-checkboxes">
              {products.map(product => (
                <label class="flex items-center text-sm">
                  <input type="checkbox" class="mr-2 product-filter" value={product}>
                  {product}
                </label>
              ))}
            </div>
          </div>
        )}
      </div>
    </details>
  )}

  <button 
    id="applyFiltersBtn" 
    class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded"
  >
    Apply Filters
  </button>
</aside>

<script>
  // This script handles sidebar filter controls
  // Will be linked to the main filtering logic in the index.astro page
  
  // DOM References
  const resetButton = document.getElementById('resetFilters');
  const applyButton = document.getElementById('applyFiltersBtn');
  const cvssSlider = document.getElementById('cvssSlider') as HTMLInputElement;
  const cvssValue = document.getElementById('cvssValue');
  const epssSlider = document.getElementById('epssSlider') as HTMLInputElement;
  const epssValue = document.getElementById('epssValue');
  const vendorSearch = document.getElementById('vendorSearch') as HTMLInputElement;
  const productSearch = document.getElementById('productSearch') as HTMLInputElement;
  const vendorCheckboxes = document.querySelectorAll('.vendor-filter');
  const productCheckboxes = document.querySelectorAll('.product-filter');
  const datePresets = document.querySelectorAll('.date-preset');
  const startDateInput = document.getElementById('startDateFilter') as HTMLInputElement;
  const endDateInput = document.getElementById('endDateFilter') as HTMLInputElement;
  
  // Initialize controls
  function initializeControls() {
    // Set up CVSS slider
    if (cvssSlider && cvssValue) {
      cvssSlider.addEventListener('input', () => {
        cvssValue.textContent = `${cvssSlider.value}+`;
        // Filter will be applied on button click or dispatched to main filtering logic
      });
    }
    
    // Set up EPSS slider
    if (epssSlider && epssValue) {
      epssSlider.addEventListener('input', () => {
        epssValue.textContent = `${epssSlider.value}%+`;
        // Filter will be applied on button click or dispatched to main filtering logic
      });
    }
    
    // Set up vendor search
    if (vendorSearch) {
      vendorSearch.addEventListener('input', () => {
        const searchTerm = vendorSearch.value.toLowerCase();
        vendorCheckboxes.forEach((checkbox: HTMLInputElement) => {
          const label = checkbox.parentElement;
          const vendorName = checkbox.value.toLowerCase();
          if (label) {
            if (vendorName.includes(searchTerm)) {
              label.style.display = '';
            } else {
              label.style.display = 'none';
            }
          }
        });
      });
    }
    
    // Set up product search
    if (productSearch) {
      productSearch.addEventListener('input', () => {
        const searchTerm = productSearch.value.toLowerCase();
        productCheckboxes.forEach((checkbox: HTMLInputElement) => {
          const label = checkbox.parentElement;
          const productName = checkbox.value.toLowerCase();
          if (label) {
            if (productName.includes(searchTerm)) {
              label.style.display = '';
            } else {
              label.style.display = 'none';
            }
          }
        });
      });
    }
    
    // Set up date presets
    datePresets.forEach((button) => {
      button.addEventListener('click', () => {
        const days = parseInt(button.getAttribute('data-days') || '0', 10);
        const today = new Date();
        const endDate = today.toISOString().split('T')[0];
        
        const startDate = new Date();
        startDate.setDate(today.getDate() - days);
        const formattedStartDate = startDate.toISOString().split('T')[0];
        
        startDateInput.value = formattedStartDate;
        endDateInput.value = endDate;
        
        // Highlight selected preset
        datePresets.forEach(btn => btn.classList.remove('bg-blue-200', 'dark:bg-blue-900'));
        button.classList.add('bg-blue-200', 'dark:bg-blue-900');
      });
    });
    
    // Reset filters
    if (resetButton) {
      resetButton.addEventListener('click', () => {
        // Reset all inputs
        document.querySelectorAll('input[type="checkbox"]').forEach((checkbox: HTMLInputElement) => {
          checkbox.checked = false;
        });
        
        if (cvssSlider) cvssSlider.value = '0';
        if (cvssValue) cvssValue.textContent = '0+';
        
        if (epssSlider) epssSlider.value = '0';
        if (epssValue) epssValue.textContent = '0%+';
        
        if (startDateInput) startDateInput.value = '';
        if (endDateInput) endDateInput.value = '';
        
        if (vendorSearch) vendorSearch.value = '';
        if (productSearch) productSearch.value = '';
        
        // Reset displayed checkboxes
        vendorCheckboxes.forEach((checkbox: HTMLInputElement) => {
          const label = checkbox.parentElement;
          if (label) label.style.display = '';
        });
        
        productCheckboxes.forEach((checkbox: HTMLInputElement) => {
          const label = checkbox.parentElement;
          if (label) label.style.display = '';
        });
        
        // Remove preset highlights
        datePresets.forEach(btn => btn.classList.remove('bg-blue-200', 'dark:bg-blue-900'));
        
        // Dispatch custom event for main page to handle reset
        dispatchFilterEvent();
      });
    }
    
    // Apply filters
    if (applyButton) {
      applyButton.addEventListener('click', () => {
        dispatchFilterEvent();
      });
    }
  }
  
  function dispatchFilterEvent() {
    // Get all filter values
    const filterData = {
      kev: (document.getElementById('kevFilter') as HTMLInputElement)?.checked || false,
      zeroDay: (document.getElementById('zeroDayFilter') as HTMLInputElement)?.checked || false,
      patchAvailable: (document.getElementById('patchAvailableFilter') as HTMLInputElement)?.checked || false,
      cvssMin: parseFloat(cvssSlider?.value || '0'),
      epssMin: parseFloat(epssSlider?.value || '0') / 100, // Convert percentage to decimal
      severity: {
        critical: (document.getElementById('criticalFilter') as HTMLInputElement)?.checked || false,
        high: (document.getElementById('highFilter') as HTMLInputElement)?.checked || false,
        medium: (document.getElementById('mediumFilter') as HTMLInputElement)?.checked || false,
        low: (document.getElementById('lowFilter') as HTMLInputElement)?.checked || false
      },
      dateRange: {
        start: startDateInput?.value || '',
        end: endDateInput?.value || ''
      },
      vendors: Array.from(vendorCheckboxes)
        .filter((cb: HTMLInputElement) => cb.checked)
        .map((cb: HTMLInputElement) => cb.value),
      products: Array.from(productCheckboxes)
        .filter((cb: HTMLInputElement) => cb.checked)
        .map((cb: HTMLInputElement) => cb.value)
    };
    
    // Dispatch a custom event with filter data
    const event = new CustomEvent('sidebarFiltersChanged', { 
      detail: filterData,
      bubbles: true 
    });
    document.dispatchEvent(event);
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', initializeControls);
</script>