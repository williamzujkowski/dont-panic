---
import type { CollectionEntry } from 'astro:content';
import SeverityTag from './SeverityTag.astro';
import ZeroDayTag from './ZeroDayTag.astro';

interface Props {
  reports: CollectionEntry<'reports'>[];
  tableId?: string;
  showTitle?: boolean;
  responsiveClasses?: string;
}

const { 
  reports, 
  tableId = 'reportTable', 
  showTitle = true,
  responsiveClasses = 'overflow-x-auto rounded-lg border border-border shadow-md flex-1 relative w-full max-w-full'
} = Astro.props;
---

<div id={`${tableId}Container`} class={responsiveClasses}>
  <table id={tableId} class="w-full text-left text-sm border-collapse table-fixed sm:table-auto">
    <thead class="bg-surface-accent border-b border-border sticky top-[0] z-10">
      <tr>
        <th scope="col" data-sort-key="cve" class="px-4 py-3 font-medium text-text-secondary text-xs cursor-pointer hover:bg-surface-accent/80 whitespace-nowrap w-[100px]">
          <div class="flex items-center">
            CVE ID
            <span class="ml-1 text-text-muted text-xs">•</span>
          </div>
        </th>
        <th scope="col" data-sort-key="title" class="hidden sm:table-cell px-4 py-3 font-medium text-text-secondary text-xs cursor-pointer hover:bg-surface-accent/80 w-auto">
          <div class="flex items-center">
            Title <span class="ml-1 text-text-muted text-xs">•</span>
          </div>
        </th>
        <th scope="col" data-sort-key="cvss" class="px-4 py-3 font-medium text-text-secondary text-xs cursor-pointer hover:bg-surface-accent/80 whitespace-nowrap w-[70px]">
          <div class="flex items-center">
            CVSS <span class="ml-1 text-text-muted text-xs">•</span>
          </div>
        </th>
        <th scope="col" data-sort-key="epss" class="hidden md:table-cell px-4 py-3 font-medium text-text-secondary text-xs cursor-pointer hover:bg-surface-accent/80 whitespace-nowrap w-[70px]">
          <div class="flex items-center">
            EPSS <span class="ml-1 text-text-muted text-xs">•</span>
          </div>
        </th>
        <th scope="col" data-sort-key="severity" class="px-4 py-3 font-medium text-text-secondary text-xs cursor-pointer hover:bg-surface-accent/80 whitespace-nowrap w-[90px]">
          <div class="flex items-center">
            Severity <span class="ml-1 text-text-muted text-xs">•</span>
          </div>
        </th>
        <th scope="col" data-sort-key="zeroday" class="hidden sm:table-cell px-4 py-3 font-medium text-text-secondary text-xs cursor-pointer hover:bg-surface-accent/80 whitespace-nowrap w-[70px]">
          <div class="flex items-center">
            0-Day <span class="ml-1 text-text-muted text-xs">•</span>
          </div>
        </th>
        <th scope="col" data-sort-key="date" class="px-4 py-3 font-medium text-text-secondary text-xs cursor-pointer hover:bg-surface-accent/80 whitespace-nowrap w-[100px]">
          <div class="flex items-center">
            Date <span class="ml-1 text-text-muted text-xs">•</span>
          </div>
        </th>
      </tr>
    </thead>
    <tbody id={`${tableId}Body`} class="divide-y divide-border">
      {reports.map((report, index) => (
        <tr 
          class="hover:bg-surface-accent/30 transition-colors"
          data-cve={report.slug}
          data-severity={report.data.severity || report.data.cvssSeverity}
          data-date={report.data.publishDate.toISOString().split('T')[0]}
          data-zeroday={report.data.isZeroDay.toString()}
          data-cvss={report.data.cvssScore}
          data-epss={report.data.epssScore}
          data-vendor={report.data.vendor}
          data-product={report.data.product}
          data-patch-available={report.data.patchAvailable?.toString() || "false"}
          data-kev={report.data.kev ? 'true' : 'false'}
        >
          <td class="px-4 py-3 whitespace-nowrap w-[100px]">
            <a 
              href={`/reports/${report.slug}`} 
              class="text-primary font-medium hover:underline inline-block text-sm"
            >
              {report.data.cveId}
            </a>
          </td>
          <td class="hidden sm:table-cell px-4 py-3 max-w-[280px] truncate text-sm w-auto">{report.data.title}</td>
          <td class="px-4 py-3 whitespace-nowrap font-mono font-medium text-sm w-[70px]" data-value={report.data.cvssScore}>
            <span class={`${report.data.cvssScore >= 7.0 ? 'text-red-600 dark:text-red-400' : (report.data.cvssScore >= 4.0 ? 'text-amber-600 dark:text-amber-400' : 'text-text-muted')}`}>
              {report.data.cvssScore !== undefined ? report.data.cvssScore.toFixed(1) : '-'}
            </span>
          </td>
          <td class="hidden md:table-cell px-4 py-3 whitespace-nowrap font-mono text-sm w-[70px]" data-value={report.data.epssScore}>
            {report.data.epssScore !== undefined ? `${(report.data.epssScore * 100).toFixed(1)}%` : '-'}
          </td>
          <td class="px-4 py-3 whitespace-nowrap w-[90px]">
            {(report.data.severity || report.data.cvssSeverity) ? 
              <SeverityTag severity={report.data.severity || report.data.cvssSeverity} />
            : <span class="text-xs">-</span>}
          </td>
          <td class="hidden sm:table-cell px-4 py-3 whitespace-nowrap text-sm w-[70px]">
            {report.data.isZeroDay ? 
              <span class="text-amber-600 dark:text-amber-400 font-medium text-xs">
                Yes
              </span>
            : <span class="text-text-muted">No</span>}
          </td>
          <td class="px-4 py-3 whitespace-nowrap text-text-secondary text-sm w-[100px]" data-value={report.data.publishDate.valueOf()}>
            {report.data.publishDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}
          </td>
        </tr>
      ))}
    </tbody>
  </table>
</div>

<script define:vars={{ tableId }}>
// Define a simple script that helps identify when the table is interacted with
document.addEventListener('DOMContentLoaded', () => {
  const tableElement = document.getElementById(tableId);
  
  if (tableElement) {
    // Handle sort header clicks
    const headers = tableElement.querySelectorAll('th[data-sort-key]');
    headers.forEach(header => {
      header.addEventListener('click', () => {
        // Dispatch an event that the parent can listen for
        const event = new CustomEvent('vulnerabilityTableSortRequest', {
          bubbles: true,
          detail: {
            tableId,
            sortKey: header.getAttribute('data-sort-key')
          }
        });
        document.dispatchEvent(event);
      });
    });

    // Add keyboard navigation functionality
    tableElement.querySelectorAll('tbody tr').forEach(row => {
      // Make rows focusable
      row.setAttribute('tabindex', '0');
      
      // Handle keyboard interaction
      row.addEventListener('keydown', (e) => {
        // Enter key navigates to the report detail page
        if (e.key === 'Enter') {
          const link = row.querySelector('a');
          if (link) {
            link.click();
          }
        }
      });
    });
  }
});
</script>

<style>
  /* Add hover effect to table rows */
  tr:hover {
    background-color: rgba(var(--color-primary-rgb, 59, 130, 246), 0.05);
  }
  
  /* Focus state for keyboard navigation */
  tr:focus {
    outline: 2px solid var(--color-primary, #3b82f6);
    outline-offset: -2px;
  }

  /* Handle responsiveness - different column widths on different screens */
  @media (min-width: 1200px) {
    /* Wider table on larger screens */
    :global(#reportTable) {
      table-layout: fixed;
    }
    
    /* Distribute table columns more evenly */
    :global(#reportTable th:nth-child(1)) { width: 10%; } /* CVE ID */
    :global(#reportTable th:nth-child(2)) { width: 30%; } /* Title */
    :global(#reportTable th:nth-child(3)) { width: 8%; }  /* CVSS */
    :global(#reportTable th:nth-child(4)) { width: 8%; }  /* EPSS */
    :global(#reportTable th:nth-child(5)) { width: 10%; } /* Severity */
    :global(#reportTable th:nth-child(6)) { width: 9%; }  /* Zero-day */
    :global(#reportTable th:nth-child(7)) { width: 15%; } /* Date */
  }
</style>