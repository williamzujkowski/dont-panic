---
// src/components/Header.astro
import type { NavItem } from '../data/navItems'; // Import the NavItem type
import Search from 'astro-pagefind/components/Search'; // Use plugin-provided Search component
import Icon from './Icon.astro'; // Import the Icon component

interface Props {
  siteTitle: string;
  navItems: NavItem[]; // Use the imported NavItem type
  currentPath: string; // Add prop for current path
  showSearch?: boolean; // Option to show/hide search
}

const { 
  siteTitle, 
  navItems, 
  currentPath,
  showSearch = true // Default to showing search
} = Astro.props;

const base = Astro.config?.base ?? '/'; // Get base path
---
<header role="banner" class="sticky top-0 z-50 bg-surface shadow-sm border-b border-border">
  <div class="w-full mx-auto flex justify-between items-center px-4 py-2">
    <!-- Site Title & Logo -->
    <div class="site-title flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <a href={base} class="text-base sm:text-lg font-semibold text-text hover:text-primary transition-colors">{siteTitle}</a>
    </div>
    
    <div class="flex items-center gap-3">
      <!-- Search component -->
      {showSearch ? 
        <div class="hidden md:block relative">
          <Search 
            placeholder="Search CVEs..." 
            className="w-60"
          />
        </div>
      : null}
      
      <!-- Main Navigation - Simplified with fewer items -->
      <nav role="navigation" aria-label="Main navigation" class="hidden md:flex items-center">
        <ul class="flex items-center">
          {navItems.map((item) => (
            <li class={item.showOnMobile === false ? 'hidden md:block' : ''}>
              <a
                href={item.href}
                class:list={[
                  "block px-3 py-1.5 font-medium text-sm hover:text-primary transition-colors",
                  item.href === currentPath 
                    ? 'text-primary font-semibold' 
                    : 'text-text-secondary'
                ]}
                aria-current={item.href === currentPath ? "page" : false}
              >
                {item.text}
              </a>
            </li>
          ))}
        </ul>
      </nav>
      
      <!-- Enhanced Filter Toggle - Using Icon component -->
      <button
        id="sidebarToggleBtn"
        aria-label="Toggle filters"
        aria-expanded="true"
        class="px-2 py-1 text-xs border border-border rounded bg-surface text-text-secondary hover:bg-surface-accent active:bg-surface-accent transition-colors flex items-center"
      >
        <Icon name="filter" size={14} class="mr-1" />
        <span class="hidden md:inline-block">Toggle Filters</span>
        <span class="md:hidden">Filters</span>
      </button>
      
      <!-- Enhanced Mobile menu button with better touch target using Icon component -->
      <button
        id="mobileMenuBtn"
        aria-label="Open menu"
        aria-expanded="false"
        aria-controls="mobileMenu"
        class="md:hidden flex items-center justify-center w-10 h-10 rounded-md text-text-secondary hover:text-primary hover:bg-surface-accent transition-colors"
      >
        <Icon name="menu" size={20} />
      </button>
      
      <!-- Enhanced Theme Toggle using Icon component -->
      <button
        id="themeToggleBtn"
        aria-label="Toggle theme"
        aria-pressed="false"
        class="w-8 h-8 flex items-center justify-center rounded-md bg-surface hover:bg-surface-accent border border-border text-text-secondary hover:text-primary transition-all duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50"
        title="Toggle dark/light mode"
      >
        <span class="dark-icon">
          <Icon name="sun" size={18} aria-hidden="true" />
        </span>
        <span class="light-icon">
          <Icon name="moon" size={18} aria-hidden="true" />
        </span>
      </button>
    </div>
  </div>
  
  <!-- Enhanced Mobile search - with improved accessibility -->
  {showSearch ? 
    <div class="md:hidden px-3 py-2 border-t border-border bg-surface-accent">
      <Search placeholder="Search CVEs..." />
      <!-- Mobile accessibility notice -->
      <div class="text-xs text-text-secondary text-center mt-1 animate-fade-in">
        <span class="flex items-center justify-center gap-1">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>Swipe tables horizontally to see more data</span>
        </span>
      </div>
    </div>
  : null}
  
  <!-- Enhanced Mobile Navigation Menu with animations and better UX -->
  <div id="mobileMenu" class="hidden md:hidden bg-surface border-t border-border">
    <nav class="max-w-[1400px] mx-auto py-3 px-4">
      <ul class="flex flex-col space-y-1">
        {navItems.map((item) => (
          <li>
            <a
              href={item.href}
              class:list={[
                "block px-4 py-3 text-base rounded-md transition-colors",
                item.href === currentPath 
                  ? 'text-primary font-medium bg-primary/10' 
                  : 'text-text-secondary hover:bg-surface-accent/70'
              ]}
              aria-current={item.href === currentPath ? "page" : false}
            >
              {item.text}
            </a>
          </li>
        ))}
      </ul>
      
      <!-- Mobile-specific actions -->
      <div class="mt-4 pt-4 border-t border-border">
        <div class="flex justify-between items-center mb-3">
          <span class="text-xs font-medium text-text-muted">Display Settings</span>
        </div>
        <!-- Mobile theme toggle with label -->
        <button 
          id="mobileThemeToggle" 
          class="w-full flex items-center justify-between px-4 py-3 rounded-md bg-surface-accent/50 text-text hover:bg-surface-accent transition-colors"
          aria-pressed="false"
          aria-label="Toggle dark mode"
        >
          <span class="text-base">
            <span class="dark-mode-text">Switch to light mode</span>
            <span class="light-mode-text">Switch to dark mode</span>
          </span>
          <span id="mobileThemeIcon" class="w-6 h-6 flex items-center justify-center" aria-hidden="true">
            <!-- Icon inserted by script -->
          </span>
        </button>
      </div>
    </nav>
  </div>
</header>

<style>
  /* Dark mode text toggle in mobile menu */
  html:not(.dark) .dark-mode-text {
    display: none;
  }
  
  html.dark .light-mode-text {
    display: none;
  }
</style>

<script>
  // Enhanced mobile menu and responsive navigation handling
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const mobileMenu = document.getElementById('mobileMenu');
    const mobileThemeToggle = document.getElementById('mobileThemeToggle');
    const mobileThemeIcon = document.getElementById('mobileThemeIcon');
    const themeToggleBtn = document.getElementById('themeToggleBtn');
    
    // Update mobile theme icon to match desktop version
    function updateMobileThemeIcon() {
      if (!mobileThemeIcon) return;
      
      const isDark = document.documentElement.classList.contains('dark');
      mobileThemeIcon.innerHTML = themeToggleBtn ? themeToggleBtn.innerHTML : (isDark 
        ? '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" /></svg>'
        : '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" /></svg>');
    }
    
    // Initial update of mobile theme icon
    updateMobileThemeIcon();
    
    // Listen for theme changes to update mobile icon
    document.addEventListener('themeChanged', () => {
      updateMobileThemeIcon();
    });
    
    // Handle mobile theme toggle
    if (mobileThemeToggle) {
      // Set initial state
      const isDarkMode = document.documentElement.classList.contains('dark');
      mobileThemeToggle.setAttribute('aria-pressed', isDarkMode ? 'true' : 'false');
      
      mobileThemeToggle.addEventListener('click', () => {
        // Click the main theme toggle button to maintain consistent behavior
        if (themeToggleBtn) {
          themeToggleBtn.click();
        }
        
        // Update aria-pressed after theme change
        setTimeout(() => {
          const isDark = document.documentElement.classList.contains('dark');
          mobileThemeToggle.setAttribute('aria-pressed', isDark ? 'true' : 'false');
        }, 50);
      });
    }
    
    // Enhanced mobile menu toggle with animation
    if (mobileMenuBtn && mobileMenu) {
      mobileMenuBtn.addEventListener('click', () => {
        const isHidden = mobileMenu.classList.contains('hidden');
        
        if (isHidden) {
          // Show menu with animation
          mobileMenu.classList.remove('hidden');
          mobileMenu.style.maxHeight = '0';
          mobileMenu.style.opacity = '0';
          mobileMenu.style.transition = 'max-height 0.3s ease-out, opacity 0.2s ease-out';
          
          // Force reflow
          void mobileMenu.offsetHeight;
          
          // Add animation
          mobileMenu.style.maxHeight = '100vh';
          mobileMenu.style.opacity = '1';
          
          // Update button
          mobileMenuBtn.setAttribute('aria-expanded', 'true');
          mobileMenuBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          `;
          
          // Lock scroll on body
          document.body.classList.add('overflow-hidden', 'md:overflow-auto');
        } else {
          // Hide menu with animation
          mobileMenu.style.maxHeight = '0';
          mobileMenu.style.opacity = '0';
          
          // Clean up after animation
          setTimeout(() => {
            mobileMenu.classList.add('hidden');
            mobileMenu.style.maxHeight = '';
            mobileMenu.style.opacity = '';
            document.body.classList.remove('overflow-hidden', 'md:overflow-auto');
          }, 300);
          
          // Update button immediately
          mobileMenuBtn.setAttribute('aria-expanded', 'false');
          mobileMenuBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          `;
        }
      });
    }
    
    // Wire up sidebar toggle button for mobile with enhanced feedback
    const sidebarToggleBtn = document.getElementById('sidebarToggleBtn');
    const filterSidebarWrapper = document.getElementById('filterSidebarWrapper');
    
    if (sidebarToggleBtn && filterSidebarWrapper) {
      sidebarToggleBtn.addEventListener('click', () => {
        // Add haptic feedback for mobile if available
        if ('vibrate' in navigator) {
          try {
            navigator.vibrate(5); // Light vibration (5ms)
          } catch (e) {
            // Ignore errors if vibration not available
          }
        }
        
        // Dispatch custom event for sidebar toggle
        document.dispatchEvent(new CustomEvent('toggleSidebar'));
      });
    }
    
    // Check screen width on resize to adapt UI
    window.addEventListener('resize', () => {
      // Ensure mobile menu is hidden on larger screens
      if (window.innerWidth >= 768 && mobileMenu && !mobileMenu.classList.contains('hidden')) {
        mobileMenu.classList.add('hidden');
        mobileMenu.style.maxHeight = '';
        mobileMenu.style.opacity = '';
        document.body.classList.remove('overflow-hidden');
        
        if (mobileMenuBtn) {
          mobileMenuBtn.setAttribute('aria-expanded', 'false');
          mobileMenuBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          `;
        }
      }
    });
  });
</script>
