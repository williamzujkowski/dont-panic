---
// src/components/ScoreDisplay.astro
interface Props {
  type: 'CVSS' | 'EPSS';
  score: number | null | undefined;
  link?: string | null; // Optional link (e.g., to NVD/FIRST)
}

const { type, score, link } = Astro.props;

let scoreText: string | null = null;
let scoreClass = 'text-text'; // Default to base text color
let label = `${type} Score:`;

if (score !== null && score !== undefined) {
  if (type === 'CVSS') {
    scoreText = score.toFixed(1);
    if (score >= 9.0) scoreClass = 'text-red-700 dark:text-red-400 font-bold';
    else if (score >= 7.0) scoreClass = 'text-orange-600 dark:text-orange-400 font-semibold';
    else if (score >= 4.0) scoreClass = 'text-yellow-600 dark:text-yellow-400'; // Use yellow for medium
    else scoreClass = 'text-text-muted'; // Use muted for low
    label = 'CVSS Score:';
  } else if (type === 'EPSS') {
    scoreText = `${(score * 100).toFixed(1)}%`;
     if (score >= 0.7) scoreClass = 'text-purple-700 dark:text-purple-400 font-semibold'; // High likelihood
     else if (score >= 0.3) scoreClass = 'text-orange-600 dark:text-orange-400'; // Medium likelihood
     else scoreClass = 'text-text-muted'; // Use muted for low
    label = 'EPSS Score:';
  }
}
---
{scoreText && (
  <div class="score-display flex items-center gap-xs text-sm"> {/* Use flex and gap */}
    <span class="font-medium text-text-secondary">{label}</span> {/* Style label */}
    {link ? (
      <a href={link} target="_blank" rel="noopener noreferrer" class:list={[scoreClass, "hover:underline"]} title={`View ${type} details`}>
        {scoreText}
      </a>
    ) : (
      <span class:list={[scoreClass]}>{scoreText}</span>
    )}
  </div>
)}
