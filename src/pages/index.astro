---
// src/pages/index.astro
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import SeverityTag from '../components/SeverityTag.astro';
import ZeroDayTag from '../components/ZeroDayTag.astro';
import FilterSidebar from '../components/FilterSidebar.astro';

// Fetch all reports, sort by publication date descending
const reports = await getCollection('reports', ({ data }) => {
  // Optional: Filter out draft posts if you add a 'draft' field later
  return data.draft !== true;
});

reports.sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());
---

<BaseLayout title="Vulnerability Reports">
  <!-- Mobile filter toggle button -->
  <div class="md:hidden mb-4">
    <button id="mobileFilterToggle" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded">
      Show Filters
    </button>
  </div>
  <!-- Layout container: sidebar + main content -->
  <div class="flex flex-col md:flex-row md:gap-6">
    <!-- Filter Sidebar: hidden on mobile (toggle), visible on desktop -->
    <div id="filterSidebarWrapper" class="hidden md:block w-full md:w-[280px]">
      <FilterSidebar reports={reports} />
    </div>

    <!-- Main Content -->
    <main class="flex-1 p-4">
      <!-- Use CSS Grid for the report section layout -->
      <div class="grid grid-cols-1 gap-4">
        <!-- Header section -->
        <div>
          <h1 class="text-xl font-semibold">Vulnerability Reports</h1>
        </div>

        <!-- Active Filter Summary -->
        <div id="activeFilters" class="text-sm text-gray-700 dark:text-gray-300 hidden">
          <div class="bg-gray-100 dark:bg-gray-700 p-3 rounded">
            <h2 class="font-medium mb-1">Active Filters:</h2>
            <div id="activeFiltersList" class="flex flex-wrap gap-2">
              <!-- Active filters will be inserted here via JS -->
            </div>
          </div>
        </div>

        <!-- Table Container - Uses grid cell with overflow handling -->
        <div class="overflow-x-auto bg-white dark:bg-gray-800 rounded-lg shadow">
          <table id="reportTable" class="w-full text-left text-sm border-collapse min-w-[360px]">
          <thead class="bg-gray-100 dark:bg-gray-700">
            <tr>
              <th scope="col" data-sort-key="cve" class="px-2 sm:px-3 py-3 sm:py-4 font-medium text-gray-600 dark:text-gray-300 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600">CVE ID <span>↕</span></th>
              <th scope="col" data-sort-key="title" class="hidden sm:table-cell px-2 sm:px-3 py-3 sm:py-4 font-medium text-gray-600 dark:text-gray-300 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600">Title/Summary <span>↕</span></th>
              <th scope="col" data-sort-key="cvss" class="px-2 sm:px-3 py-3 sm:py-4 font-medium text-gray-600 dark:text-gray-300 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600">CVSS <span>↕</span></th>
              <th scope="col" data-sort-key="epss" class="hidden md:table-cell px-2 sm:px-3 py-3 sm:py-4 font-medium text-gray-600 dark:text-gray-300 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600">EPSS <span>↕</span></th>
              <th scope="col" data-sort-key="severity" class="px-2 sm:px-3 py-3 sm:py-4 font-medium text-gray-600 dark:text-gray-300 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600">Severity <span>↕</span></th>
              <th scope="col" data-sort-key="zeroday" class="hidden sm:table-cell px-2 sm:px-3 py-3 sm:py-4 font-medium text-gray-600 dark:text-gray-300 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600">Zero-Day? <span>↕</span></th>
              <th scope="col" data-sort-key="date" class="px-2 sm:px-3 py-3 sm:py-4 font-medium text-gray-600 dark:text-gray-300 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600">Date <span>↕</span></th>
            </tr>
          </thead>
          <tbody id="reportTableBody">
            {reports.map((report) => (
              <tr 
                class="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800/50" 
                data-cve={report.slug}
                data-severity={report.data.severity || report.data.cvssSeverity}
                data-date={report.data.publishDate.toISOString().split('T')[0]}
                data-zeroday={report.data.isZeroDay.toString()}
                data-cvss={report.data.cvssScore}
                data-epss={report.data.epssScore}
                data-vendor={report.data.vendor}
                data-product={report.data.product}
                data-patch-available={report.data.patchAvailable.toString()}
                data-kev={report.data.kev ? 'true' : 'false'}
              >
                <td class="px-2 sm:px-3 py-3 sm:py-4 whitespace-nowrap">
                  <a 
                    href={`/reports/${report.slug}`} 
                    class="text-blue-600 dark:text-blue-400 font-medium hover:underline inline-block py-1"
                  >
                    {report.data.cveId}
                  </a>
                </td>
                <td class="hidden sm:table-cell px-2 sm:px-3 py-3 sm:py-4">{report.data.title}</td>
                <td class="px-2 sm:px-3 py-3 sm:py-4 whitespace-nowrap font-mono" data-value={report.data.cvssScore}>
                  {report.data.cvssScore !== undefined ? report.data.cvssScore.toFixed(1) : 'N/A'}
                </td>
                <td class="hidden md:table-cell px-2 sm:px-3 py-3 sm:py-4 whitespace-nowrap font-mono" data-value={report.data.epssScore}>
                  {report.data.epssScore !== undefined ? `${(report.data.epssScore * 100).toFixed(1)}%` : 'N/A'}
                </td>
                <td class="px-2 sm:px-3 py-3 sm:py-4 whitespace-nowrap">
                  {(report.data.severity || report.data.cvssSeverity) && 
                    <SeverityTag severity={report.data.severity || report.data.cvssSeverity} />
                  }
                </td>
                <td class="hidden sm:table-cell px-2 sm:px-3 py-3 sm:py-4 whitespace-nowrap">
                  {report.data.isZeroDay ? (
                    <span class="text-yellow-600 dark:text-yellow-400">✓ Yes</span>
                  ) : 'No'}
                </td>
                <td class="px-2 sm:px-3 py-3 sm:py-4 whitespace-nowrap" data-value={report.data.publishDate.valueOf()}>
                  {report.data.publishDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        <div id="resultsCount" class="p-3 text-sm text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-750 border-t border-gray-200 dark:border-gray-700">
          Showing {reports.length} vulnerability reports
        </div>
      </div>
      </div>
    </main>
  </div>
</BaseLayout>

<script>
  // DOM References
  const table = document.getElementById('reportTable');
  const tableBody = document.getElementById('reportTableBody');
  const sortableHeaders = document.querySelectorAll('th[data-sort-key]');
  const activeFiltersContainer = document.getElementById('activeFilters');
  const activeFiltersList = document.getElementById('activeFiltersList');

  // State
  let state = {
    sort: 'date', // Default sort column
    dir: 'desc',   // Default sort direction
    filters: {}    // Active filters from sidebar
  };

  // Initialization function
  function initialize() {
    // Read URL params for initial state
    const urlParams = new URLSearchParams(window.location.search);
    
    if (urlParams.has('sort')) state.sort = urlParams.get('sort');
    if (urlParams.has('dir')) state.dir = urlParams.get('dir');
    
    // Add event listeners for sorting
    sortableHeaders.forEach(header => {
      header.addEventListener('click', (e) => handleSortClick(e));
    });

    // Add event listener for sidebar filter changes
    document.addEventListener('sidebarFiltersChanged', (e) => {
      state.filters = e.detail;
      applyFiltering();
      updateActiveFiltersDisplay();
      updateURL();
    });
    
    // Apply initial sort and highlighting
    applySorting();
    handleHighlighting();
  }

  // Update URL with current state
  function updateURL() {
    const url = new URL(window.location);
    
    // Clear existing params
    url.searchParams.delete('sort');
    url.searchParams.delete('dir');
    
    // Set sorting params
    url.searchParams.set('sort', state.sort);
    url.searchParams.set('dir', state.dir);
    
    // Set filter params if present
    if (state.filters) {
      // Add filter parameters based on state.filters object
      // This is simplified - you'll need to expand this based on your filter structure
      if (state.filters.zeroDay) url.searchParams.set('zeroDay', 'true');
      if (state.filters.kev) url.searchParams.set('kev', 'true');
      if (state.filters.patchAvailable) url.searchParams.set('patchAvailable', 'true');
      if (state.filters.cvssMin > 0) url.searchParams.set('cvssMin', state.filters.cvssMin.toString());
      if (state.filters.epssMin > 0) url.searchParams.set('epssMin', state.filters.epssMin.toString());
      
      // Handle severity filters
      const severities = [];
      if (state.filters.severity?.critical) severities.push('Critical');
      if (state.filters.severity?.high) severities.push('High');
      if (state.filters.severity?.medium) severities.push('Medium');
      if (state.filters.severity?.low) severities.push('Low');
      if (severities.length > 0) url.searchParams.set('severity', severities.join(','));
      
      // Handle date range
      if (state.filters.dateRange?.start) url.searchParams.set('startDate', state.filters.dateRange.start);
      if (state.filters.dateRange?.end) url.searchParams.set('endDate', state.filters.dateRange.end);
      
      // Handle vendors and products (if multiple, join with commas)
      if (state.filters.vendors?.length > 0) url.searchParams.set('vendors', state.filters.vendors.join(','));
      if (state.filters.products?.length > 0) url.searchParams.set('products', state.filters.products.join(','));
    }
    
    history.pushState({}, '', url);
  }

  // Sort click handler
  function handleSortClick(e) {
    const clickedKey = e.currentTarget.getAttribute('data-sort-key');
    
    // If clicking the same column, toggle direction
    if (clickedKey === state.sort) {
      state.dir = state.dir === 'asc' ? 'desc' : 'asc';
    } else {
      // New column, set as active sort and default to desc (except for title/summary)
      state.sort = clickedKey;
      state.dir = clickedKey === 'title' ? 'asc' : 'desc';
    }
    
    applySorting();
    updateURL();
  }

  // Apply sorting to table
  function applySorting() {
    // Clear sort indicators
    sortableHeaders.forEach(header => {
      const span = header.querySelector('span');
      span.textContent = '↕';
    });
    
    // Set active sort indicator
    const activeHeader = document.querySelector(`th[data-sort-key="${state.sort}"]`);
    if (activeHeader) {
      const span = activeHeader.querySelector('span');
      span.textContent = state.dir === 'asc' ? '↑' : '↓';
    }
    
    // Get rows as array for sorting
    const rows = Array.from(tableBody.querySelectorAll('tr:not([hidden])'));
    
    // Sort rows
    rows.sort((rowA, rowB) => {
      // Get cell to sort by
      const cellA = rowA.querySelector(`td[data-value]`) || rowA.cells[getColumnIndex(state.sort)];
      const cellB = rowB.querySelector(`td[data-value]`) || rowB.cells[getColumnIndex(state.sort)];
      
      // Get values
      let valueA, valueB;
      
      if (state.sort === 'zeroday') {
        valueA = rowA.getAttribute('data-zeroday') === 'true';
        valueB = rowB.getAttribute('data-zeroday') === 'true';
      } else if (cellA.hasAttribute('data-value') && cellB.hasAttribute('data-value')) {
        valueA = cellA.getAttribute('data-value');
        valueB = cellB.getAttribute('data-value');
        
        // Convert numeric values
        if (!isNaN(Number(valueA)) && !isNaN(Number(valueB))) {
          valueA = Number(valueA);
          valueB = Number(valueB);
        }
      } else {
        valueA = cellA.textContent.trim().toLowerCase();
        valueB = cellB.textContent.trim().toLowerCase();
      }
      
      // Compare
      if (valueA === valueB) return 0;
      
      const direction = state.dir === 'asc' ? 1 : -1;
      return valueA > valueB ? direction : -direction;
    });
    
    // Clear table body
    while (tableBody.firstChild) {
      tableBody.removeChild(tableBody.firstChild);
    }
    
    // Add sorted rows
    rows.forEach(row => tableBody.appendChild(row));
  }

  // Apply filtering based on sidebar filters
  function applyFiltering() {
    if (!state.filters) return;
    
    const rows = tableBody.querySelectorAll('tr');
    let visibleCount = 0;
    
    rows.forEach(row => {
      let visible = true;
      
      // Apply Zero-Day filter
      if (visible && state.filters.zeroDay) {
        const isZeroDay = row.getAttribute('data-zeroday') === 'true';
        if (!isZeroDay) visible = false;
      }
      
      // Apply KEV filter
      if (visible && state.filters.kev) {
        const kev = row.getAttribute('data-kev') === 'true';
        if (!kev) visible = false;
      }
      
      // Apply Patch Available filter
      if (visible && state.filters.patchAvailable) {
        const patchAvailable = row.getAttribute('data-patch-available') === 'true';
        if (!patchAvailable) visible = false;
      }
      
      // Apply CVSS Min filter
      if (visible && state.filters.cvssMin > 0) {
        const cvssScore = parseFloat(row.getAttribute('data-cvss') || '0');
        if (cvssScore < state.filters.cvssMin) visible = false;
      }
      
      // Apply EPSS Min filter
      if (visible && state.filters.epssMin > 0) {
        const epssScore = parseFloat(row.getAttribute('data-epss') || '0');
        if (epssScore < state.filters.epssMin) visible = false;
      }
      
      // Apply Severity filters
      if (visible && state.filters.severity && 
          (state.filters.severity.critical || 
           state.filters.severity.high || 
           state.filters.severity.medium || 
           state.filters.severity.low)) {
        
        const rowSeverity = row.getAttribute('data-severity');
        
        if (rowSeverity) {
          const matchesSeverity = 
            (rowSeverity === 'Critical' && state.filters.severity.critical) ||
            (rowSeverity === 'High' && state.filters.severity.high) ||
            (rowSeverity === 'Medium' && state.filters.severity.medium) ||
            (rowSeverity === 'Low' && state.filters.severity.low);
            
          if (!matchesSeverity) visible = false;
        }
      }
      
      // Apply Date Range filters
      if (visible && state.filters.dateRange) {
        const rowDate = row.getAttribute('data-date');
        
        if (rowDate) {
          if (state.filters.dateRange.start && rowDate < state.filters.dateRange.start) {
            visible = false;
          }
          
          if (state.filters.dateRange.end && rowDate > state.filters.dateRange.end) {
            visible = false;
          }
        }
      }
      
      // Apply Vendor filters
      if (visible && state.filters.vendors && state.filters.vendors.length > 0) {
        const vendor = row.getAttribute('data-vendor');
        if (!vendor || !state.filters.vendors.includes(vendor)) {
          visible = false;
        }
      }
      
      // Apply Product filters
      if (visible && state.filters.products && state.filters.products.length > 0) {
        const product = row.getAttribute('data-product');
        if (!product || !state.filters.products.includes(product)) {
          visible = false;
        }
      }
      
      // Update visibility
      row.hidden = !visible;
      if (visible) visibleCount++;
    });
    
    // Re-apply sorting to the filtered rows
    applySorting();
    
    // Update count in UI
    const resultsCount = document.getElementById('resultsCount');
    if (resultsCount) {
      resultsCount.textContent = `Showing ${visibleCount} vulnerability reports`;
    }
  }

  // Update active filters display
  function updateActiveFiltersDisplay() {
    if (!state.filters || !activeFiltersContainer || !activeFiltersList) return;
    
    // Clear current filters
    activeFiltersList.innerHTML = '';
    
    // Track if we have any active filters
    let hasActiveFilters = false;
    
    // Helper to add a filter chip
    const addFilterChip = (label) => {
      hasActiveFilters = true;
      const chip = document.createElement('span');
      chip.className = 'px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full text-xs flex items-center';
      chip.innerHTML = `${label} <button class="ml-1 text-xs font-bold" data-filter="${label}">&times;</button>`;
      activeFiltersList.appendChild(chip);
    };
    
    // Add chips for each active filter
    if (state.filters.zeroDay) addFilterChip('Zero-Day');
    if (state.filters.kev) addFilterChip('Known Exploited');
    if (state.filters.patchAvailable) addFilterChip('Patch Available');
    
    if (state.filters.cvssMin > 0) addFilterChip(`CVSS ≥ ${state.filters.cvssMin}`);
    if (state.filters.epssMin > 0) addFilterChip(`EPSS ≥ ${state.filters.epssMin * 100}%`);
    
    // Severity filters
    if (state.filters.severity) {
      if (state.filters.severity.critical) addFilterChip('Critical');
      if (state.filters.severity.high) addFilterChip('High');
      if (state.filters.severity.medium) addFilterChip('Medium');
      if (state.filters.severity.low) addFilterChip('Low');
    }
    
    // Date range
    if (state.filters.dateRange) {
      if (state.filters.dateRange.start) addFilterChip(`From: ${state.filters.dateRange.start}`);
      if (state.filters.dateRange.end) addFilterChip(`To: ${state.filters.dateRange.end}`);
    }
    
    // Vendors
    if (state.filters.vendors && state.filters.vendors.length > 0) {
      state.filters.vendors.forEach(vendor => addFilterChip(`Vendor: ${vendor}`));
    }
    
    // Products
    if (state.filters.products && state.filters.products.length > 0) {
      state.filters.products.forEach(product => addFilterChip(`Product: ${product}`));
    }
    
    // Show/hide the container based on whether there are active filters
    activeFiltersContainer.classList.toggle('hidden', !hasActiveFilters);
    
    // Add click handlers to remove filter buttons
    document.querySelectorAll('#activeFiltersList button').forEach(button => {
      button.addEventListener('click', (e) => {
        const filterLabel = e.currentTarget.getAttribute('data-filter');
        if (!filterLabel) return;
        // Remove filter based on label
        switch (filterLabel) {
          case 'Zero-Day':
            state.filters.zeroDay = false;
            break;
          case 'Known Exploited':
            state.filters.kev = false;
            break;
          case 'Patch Available':
            state.filters.patchAvailable = false;
            break;
          default:
            if (filterLabel.startsWith('CVSS ≥ ')) {
              state.filters.cvssMin = 0;
            } else if (filterLabel.startsWith('EPSS ≥ ')) {
              state.filters.epssMin = 0;
            } else if (['Critical', 'High', 'Medium', 'Low'].includes(filterLabel)) {
              const key = filterLabel.toLowerCase();
              if (state.filters.severity) state.filters.severity[key] = false;
            } else if (filterLabel.startsWith('From: ')) {
              state.filters.dateRange.start = '';
            } else if (filterLabel.startsWith('To: ')) {
              state.filters.dateRange.end = '';
            } else if (filterLabel.startsWith('Vendor: ')) {
              const vendor = filterLabel.replace('Vendor: ', '');
              state.filters.vendors = state.filters.vendors.filter(v => v !== vendor);
            } else if (filterLabel.startsWith('Product: ')) {
              const product = filterLabel.replace('Product: ', '');
              state.filters.products = state.filters.products.filter(p => p !== product);
            }
        }
        applyFiltering();
        updateActiveFiltersDisplay();
        updateURL();
      });
    });
  } // Close the updateActiveFiltersDisplay function here

  // Listen for close request from sidebar component
  document.addEventListener('closeSidebarRequest', () => {
    closeSidebar();
  });

  // Highlight new reports
  function handleHighlighting() {
    // Get last visit time from localStorage
    const lastVisit = localStorage.getItem('lastVisitTimestamp');
    const now = Date.now();

    if (lastVisit) {
      const rows = tableBody.querySelectorAll('tr');

      rows.forEach(row => {
        const dateStr = row.getAttribute('data-date');
        if (dateStr) {
          const reportDate = new Date(dateStr).getTime();
          // If report is newer than last visit, highlight it
          if (reportDate > Number(lastVisit)) {
            row.classList.add('new-report');
          }
        }
      });
    }

    // Update last visit timestamp
    localStorage.setItem('lastVisitTimestamp', now);
  }

  // Utility: Get column index by sort key
  function getColumnIndex(key) {
    switch (key) {
      case 'cve': return 0;
      case 'title': return 1;
      case 'cvss': return 2;
      case 'epss': return 3;
      case 'severity': return 4;
      case 'zeroday': return 5;
      case 'date': return 6;
      default: return 0;
    }
  }

  // Define closeSidebar function in a higher scope
  function closeSidebar() {
    const sidebar = document.getElementById('filterSidebar');
    const toggleBtn = document.getElementById('filterToggleBtn');
    const overlay = document.getElementById('sidebarOverlay');

    if (sidebar) {
      // Animate out
      if (overlay) {
        overlay.style.opacity = '0';
      }
       
      // Add animation to sidebar if on mobile
      if (window.innerWidth < 768) {
        sidebar.style.transform = 'translateX(-100%)';
      }
       
      // Wait for animation before hiding
      setTimeout(() => {
        sidebar.classList.add('hidden');
        sidebar.classList.remove('fixed', 'inset-y-0', 'left-0', 'z-50', 'pt-16', 'pb-4', 'overflow-y-auto', 'w-[85%]', 'max-w-sm');
        sidebar.style.transform = '';
         
        if (overlay) {
          overlay.classList.add('hidden');
        }
         
        document.body.classList.remove('overflow-hidden');
      }, 300);
       
      if (toggleBtn) {
        toggleBtn.setAttribute('aria-expanded', 'false');
        toggleBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />
        </svg> Show Filters`;
      }
    }
  }

  // Mobile filter sidebar toggle
  function setupFilterToggle() {
    const toggleBtn = document.getElementById('filterToggleBtn');
    const sidebar = document.getElementById('filterSidebar');
    let overlay;
     
    // Create overlay element for mobile
    function createOverlay() {
      overlay = document.createElement('div');
      overlay.id = 'sidebarOverlay';
      overlay.className = 'fixed inset-0 bg-black/50 z-40 hidden md:hidden';
      overlay.style.opacity = '0';
      overlay.style.transition = 'opacity 0.3s ease';
      document.body.appendChild(overlay);
       
      // Close sidebar when clicking overlay
      overlay.addEventListener('click', () => {
        closeSidebar(); // Now calls the function in the higher scope
      });
    }
     
    if (toggleBtn && sidebar) {
      // Create overlay on init
      createOverlay();
      
      // Set transition for sidebar
      sidebar.style.transition = 'transform 0.3s ease';

      // Check initial screen size and set sidebar visibility accordingly
      if (window.innerWidth >= 768) {
        // Desktop: Ensure sidebar is visible and styled correctly on load
        sidebar.classList.remove('hidden', 'fixed', 'inset-y-0', 'left-0', 'z-50', 'pt-16', 'pb-4', 'w-[85%]', 'max-w-sm');
        sidebar.style.transform = ''; // Clear any transform
        // Make sure the parent container is visible on desktop
        const parentContainer = sidebar.closest('div');
        if (parentContainer) {
          parentContainer.classList.remove('hidden');
          parentContainer.classList.add('block');
        }
      } else {
        // Mobile: Ensure sidebar is hidden on load
        sidebar.classList.add('hidden');
      }
      
      toggleBtn.addEventListener('click', () => {
        const isExpanded = toggleBtn.getAttribute('aria-expanded') === 'true';
        const newState = !isExpanded;
        
        // Update button state
        toggleBtn.setAttribute('aria-expanded', newState.toString());
          toggleBtn.innerHTML = newState 
          ? `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
             </svg> Hide Filters` 
            : `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />
             </svg> Show Filters`;
             
        // Toggle sidebar visibility with proper mobile styling
        if (newState) {
          // On mobile, make it fixed position and add slide-in animation
          if (window.innerWidth < 768) {
            // Show overlay first (with animation)
            overlay.classList.remove('hidden');
            // Force a reflow
            void overlay.offsetWidth;
            overlay.style.opacity = '1';
            
            // Make sure the sidebar is visible 
            sidebar.classList.remove('hidden');
            
            // Add mobile-specific classes
            sidebar.classList.add('fixed', 'inset-y-0', 'left-0', 'z-50', 'pt-16', 'pb-4', 'overflow-y-auto', 'w-[85%]', 'max-w-sm');
            sidebar.style.transform = 'translateX(-100%)';
            
            // Force a reflow
            void sidebar.offsetWidth;
            
            // Then animate in
            sidebar.style.transform = 'translateX(0)';
            
            document.body.classList.add('overflow-hidden'); // Prevent background scrolling
          } else {
            // On desktop, the sidebar is already visible through CSS grid
            sidebar.classList.remove('hidden');
          }
        } else {
          closeSidebar();
        }
      });
      
      // Handle window resize
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 768) {
          // Resized to Desktop: Ensure sidebar is visible and styled correctly
          sidebar.classList.remove('hidden', 'fixed', 'inset-y-0', 'left-0', 'z-50', 'pt-16', 'pb-4', 'w-[85%]', 'max-w-sm');
          sidebar.style.transform = ''; // Ensure transform is cleared
          
          // Make sure the parent container is visible on desktop
          const parentContainer = sidebar.closest('div');
          if (parentContainer) {
            parentContainer.classList.remove('hidden');
            parentContainer.classList.add('block');
          }
          
          if (overlay) overlay.classList.add('hidden');
          document.body.classList.remove('overflow-hidden');
          // Reset toggle button state if resizing to desktop
          toggleBtn.setAttribute('aria-expanded', 'false');
          toggleBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />
            </svg> Show Filters`;
        } else {
          // Resized to Mobile: Hide sidebar unless it was explicitly open
          const isExpanded = toggleBtn.getAttribute('aria-expanded') === 'true';
          if (!isExpanded) {
             sidebar.classList.add('hidden');
             // Clean up mobile positioning classes if they were somehow left
             sidebar.classList.remove('fixed', 'inset-y-0', 'left-0', 'z-50', 'pt-16', 'pb-4', 'overflow-y-auto', 'w-[85%]', 'max-w-sm');
             sidebar.style.transform = '';
             if (overlay) overlay.classList.add('hidden');
             document.body.classList.remove('overflow-hidden');
          }
        }
      });
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initialize();
    // Removed legacy desktop/mobile toggle; using mobile-specific toggle only
    // Mobile filter toggle behavior
    const mobileToggle = document.getElementById('mobileFilterToggle');
    const sidebarWrapper = document.getElementById('filterSidebarWrapper');
    if (mobileToggle && sidebarWrapper) {
      mobileToggle.addEventListener('click', () => {
        const isHidden = sidebarWrapper.classList.contains('hidden');
        if (isHidden) {
          sidebarWrapper.classList.remove('hidden');
          mobileToggle.textContent = 'Hide Filters';
        } else {
          sidebarWrapper.classList.add('hidden');
          mobileToggle.textContent = 'Show Filters';
        }
      });
    }
  });
</script>

<style>
  /* Highlight style for new reports using direct CSS */
  tr.new-report {
    /* Replace @apply with direct CSS properties */
    border-left-width: 4px;
    border-left-color: #10b981; /* Tailwind's emerald-500 */
    animation: fadeOutHighlight 3s ease-out forwards;
  }
  
  @keyframes fadeOutHighlight {
    /* Replace @apply with direct CSS properties */
    from { border-left-color: #10b981; } /* Tailwind's emerald-500 */
    to { border-left-color: transparent; } 
  }
</style>
