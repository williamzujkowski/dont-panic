---
// src/pages/reports/[slug].astro
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

// Generate static pages for each report
export async function getStaticPaths() {
  const reportEntries = await getCollection('reports');
  return reportEntries.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---
<BaseLayout title={entry.data.title} description={entry.data.description}>
	<article class="prose prose-lg max-w-none dark:prose-invert"> {/* Apply Tailwind Typography */}
		{/* Report Header */}
		<header class="mb-8 border-b border-border pb-4">
			<h1 class="!mb-2">{entry.data.title}</h1> {/* Override prose margin */}
			<p class="text-text-muted text-sm">
				Published on: <time datetime={entry.data.pubDate.toISOString()}>
					{entry.data.pubDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
				</time>
			</p>
			{entry.data.cvss && (
				<p class="text-sm text-text-secondary">CVSS Score: {entry.data.cvss}</p>
			)}
			{entry.data.epss && (
				<p class="text-sm text-text-secondary">EPSS Score: {(entry.data.epss * 100).toFixed(1)}%</p>
			)}
			{entry.data.tags && entry.data.tags.length > 0 && (
				<div class="mt-2 text-sm">
					Tags: {entry.data.tags.map(tag => (
						<span class="inline-block bg-secondary/10 text-secondary rounded px-2 py-0.5 mr-1">#{tag}</span>
					))}
				</div>
			)}
		</header>

		{/* Report Content */}
		<Content />
	</article>
</BaseLayout>
